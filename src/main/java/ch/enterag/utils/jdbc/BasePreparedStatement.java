/*======================================================================
BasePreparedStatement implements a wrapped PreparedStatement
Version     : $Id: $
Application : SIARD2
Description : BaseConnection implements a wrapped Connection.
              See https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
Platform    : Java 7   
------------------------------------------------------------------------
Copyright  : 2017, Enter AG, RÃ¼ti ZH, Switzerland
Created    : 13.04.2017, Hartwig Thomas
======================================================================*/
package ch.enterag.utils.jdbc;

import java.io.*;
import java.math.*;
import java.net.*;
import java.sql.*;
import java.sql.Date;
import java.util.*;

/*====================================================================*/
/** BaseConnection implements a wrapped Connection and serves as a base
 * for derived JDBC wrappers.
 * @author Hartwig Thomas
 */
public abstract class BasePreparedStatement
  implements PreparedStatement
{
  /** wrapped prepared statement */
  private PreparedStatement _pstmtWrapped = null;

  /*------------------------------------------------------------------*/
  /** constructor
   * @param pstmtWrapped prepared statement to be wrapped.
   */
  public BasePreparedStatement(PreparedStatement pstmtWrapped)
    throws SQLException
  {
    _pstmtWrapped = pstmtWrapped;
    if (_pstmtWrapped != null)
      _pstmtWrapped.setEscapeProcessing(false);
  } /* constructor BasePreparedStatement */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public Connection getConnection() throws SQLException
  {
    return _pstmtWrapped.getConnection();
  } /* getConnection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSetMetaData getMetaData() throws SQLException
  {
    return _pstmtWrapped.getMetaData();
  } /* getMetaData */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ParameterMetaData getParameterMetaData() throws SQLException
  {
    return _pstmtWrapped.getParameterMetaData();
  } /* getParameterMetaData */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet getResultSet() throws SQLException
  {
    return _pstmtWrapped.getResultSet();
  } /* getResultSet */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void addBatch(String sql) throws SQLException
  {
    _pstmtWrapped.addBatch(sql);
  } /* addBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void cancel() throws SQLException
  {
    _pstmtWrapped.cancel();
  } /* cancel */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void clearBatch() throws SQLException
  {
    _pstmtWrapped.clearBatch();
  } /* clearBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void clearWarnings() throws SQLException
  {
    _pstmtWrapped.clearWarnings();
  } /* clearWarnings */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void close() throws SQLException
  {
    _pstmtWrapped.close();
  } /* close */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void closeOnCompletion() throws SQLException
  {
    _pstmtWrapped.closeOnCompletion();
  } /* closeOnCompletion */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql) throws SQLException
  {
    return _pstmtWrapped.execute(sql);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int autoGeneratedKeys)
    throws SQLException
  {
    return _pstmtWrapped.execute(sql, autoGeneratedKeys);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int[] columnIndexes)
    throws SQLException
  {
    return _pstmtWrapped.execute(sql, columnIndexes);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, String[] columnNames)
    throws SQLException
  {
    return _pstmtWrapped.execute(sql, columnNames);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int[] executeBatch() throws SQLException
  {
    return _pstmtWrapped.executeBatch();
  } /* executeBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    return _pstmtWrapped.executeQuery(sql);
  } /* executeQuery */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    return _pstmtWrapped.executeUpdate(sql);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
    throws SQLException
  {
    return _pstmtWrapped.executeUpdate(sql, autoGeneratedKeys);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes)
    throws SQLException
  {
    return _pstmtWrapped.executeUpdate(sql, columnIndexes);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, String[] columnNames)
    throws SQLException
  {
    return _pstmtWrapped.executeUpdate(sql, columnNames);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getFetchDirection() throws SQLException
  {
    return _pstmtWrapped.getFetchDirection();
  } /* getFetchDirection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getFetchSize() throws SQLException
  {
    return _pstmtWrapped.getFetchSize();
  } /* getFetchSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet getGeneratedKeys() throws SQLException
  {
    return _pstmtWrapped.getGeneratedKeys();
  } /* getGeneratedKeys */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getMaxFieldSize() throws SQLException
  {
    return _pstmtWrapped.getMaxFieldSize();
  } /* getMaxFieldSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getMaxRows() throws SQLException
  {
    return _pstmtWrapped.getMaxRows();
  } /* getMaxRows */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean getMoreResults() throws SQLException
  {
    return _pstmtWrapped.getMoreResults();
  } /* getMoreResults */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean getMoreResults(int current) throws SQLException
  {
    return _pstmtWrapped.getMoreResults(current);
  } /* getMoreResults */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getQueryTimeout() throws SQLException
  {
    return _pstmtWrapped.getQueryTimeout();
  } /* getQueryTimeout */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetConcurrency() throws SQLException
  {
    return _pstmtWrapped.getResultSetConcurrency();
  } /* getResultSetConcurrency */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetHoldability() throws SQLException
  {
    return _pstmtWrapped.getResultSetHoldability();
  } /* getResultSetHoldability */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetType() throws SQLException
  {
    return _pstmtWrapped.getResultSetType();
  } /* getResultSetType */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getUpdateCount() throws SQLException
  {
    return _pstmtWrapped.getUpdateCount();
  } /* getUpdateCount */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public SQLWarning getWarnings() throws SQLException
  {
    return _pstmtWrapped.getWarnings();
  } /* getWarnings */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isCloseOnCompletion() throws SQLException
  {
    return _pstmtWrapped.isCloseOnCompletion();
  } /* isCloseOnCompletion */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isClosed() throws SQLException
  {
    return _pstmtWrapped.isClosed();
  } /* isClosed */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isPoolable() throws SQLException
  {
    return _pstmtWrapped.isPoolable();
  } /* isPoolable */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setCursorName(String name) throws SQLException
  {
    _pstmtWrapped.setCursorName(name);
  } /* setCursorName */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException
  {
    _pstmtWrapped.setEscapeProcessing(enable);
  } /* setEscapeProcessing */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setFetchDirection(int direction) throws SQLException
  {
    _pstmtWrapped.setFetchDirection(direction);
  } /* setFetchDirection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setFetchSize(int rows) throws SQLException
  {
    _pstmtWrapped.setFetchSize(rows);
  } /* setFetchSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setMaxFieldSize(int max) throws SQLException
  {
    _pstmtWrapped.setMaxFieldSize(max);
  } /* setMaxFieldSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setMaxRows(int max) throws SQLException
  {
    _pstmtWrapped.setMaxRows(max);
  } /* setMaxRows */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setPoolable(boolean poolable) throws SQLException
  {
    _pstmtWrapped.setPoolable(poolable);
  } /* setPoolable */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setQueryTimeout(int seconds) throws SQLException
  {
    _pstmtWrapped.setQueryTimeout(seconds);
  } /* setQueryTimeout */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void addBatch() throws SQLException
  {
    _pstmtWrapped.addBatch();
  } /* addBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void clearParameters() throws SQLException
  {
    _pstmtWrapped.clearParameters();
  } /* clearParameters */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute() throws SQLException
  {
    return _pstmtWrapped.execute();
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet executeQuery() throws SQLException
  {
    return _pstmtWrapped.executeQuery();
  } /* executeQuery */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate() throws SQLException
  {
    return _pstmtWrapped.executeUpdate();
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setArray(int parameterIndex, Array x) throws SQLException
  {
    _pstmtWrapped.setArray(parameterIndex, x);
  } /* setArray */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x)
    throws SQLException
  {
    _pstmtWrapped.setAsciiStream(parameterIndex, x);
  } /* setAsciiStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    _pstmtWrapped.setAsciiStream(parameterIndex, x, length);
  } /* setAsciiStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, long length)
    throws SQLException
  {
    _pstmtWrapped.setAsciiStream(parameterIndex, x, length);
  } /* setAsciiStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBigDecimal(int parameterIndex, BigDecimal x)
    throws SQLException
  {
    _pstmtWrapped.setBigDecimal(parameterIndex, x);
  } /* setBigDecimal */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x)
    throws SQLException
  {
    _pstmtWrapped.setBinaryStream(parameterIndex, x);
  } /* setBinaryStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    _pstmtWrapped.setBinaryStream(parameterIndex, x, length);
  } /* setBinaryStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, long length)
    throws SQLException
  {
    _pstmtWrapped.setBinaryStream(parameterIndex, x, length);
  } /* setBinaryStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBlob(int parameterIndex, Blob x) throws SQLException
  {
    _pstmtWrapped.setBlob(parameterIndex, x);
  } /* setBlob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException
  {
    _pstmtWrapped.setBlob(parameterIndex, inputStream);
  } /* setBlob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBlob(int parameterIndex, InputStream inputStream, long length)
    throws SQLException
  {
    _pstmtWrapped.setBlob(parameterIndex, inputStream, length);
  } /* setBlob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBoolean(int parameterIndex, boolean x) throws SQLException
  {
    _pstmtWrapped.setBoolean(parameterIndex, x);
  } /* setBoolean */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setByte(int parameterIndex, byte x) throws SQLException
  {
    _pstmtWrapped.setByte(parameterIndex, x);
  } /* setByte */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setBytes(int parameterIndex, byte[] x) throws SQLException
  {
    _pstmtWrapped.setBytes(parameterIndex, x);
  } /* setBytes */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader)
    throws SQLException
  {
    _pstmtWrapped.setCharacterStream(parameterIndex, reader);
  } /* setCharacterStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, int length)
    throws SQLException
  {
    _pstmtWrapped.setCharacterStream(parameterIndex, reader, length);
  } /* setCharacterStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    _pstmtWrapped.setCharacterStream(parameterIndex, reader, length);
  } /* setCharacterStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setClob(int parameterIndex, Clob x) throws SQLException
  {
    _pstmtWrapped.setClob(parameterIndex, x);
  } /* setClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setClob(int parameterIndex, Reader reader) throws SQLException
  {
    _pstmtWrapped.setClob(parameterIndex, reader);
  } /* setClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setClob(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    _pstmtWrapped.setClob(parameterIndex, reader, length);
  } /* setClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setDate(int parameterIndex, Date x) throws SQLException
  {
    _pstmtWrapped.setDate(parameterIndex, x);
  } /* setDate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setDate(int parameterIndex, Date x, Calendar cal)
    throws SQLException
  {
    _pstmtWrapped.setDate(parameterIndex, x, cal);
  } /* setDate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setDouble(int parameterIndex, double x) throws SQLException
  {
    _pstmtWrapped.setDouble(parameterIndex, x);
  } /* setDouble */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setFloat(int parameterIndex, float x) throws SQLException
  {
    _pstmtWrapped.setFloat(parameterIndex, x);
  } /* setFloat */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setInt(int parameterIndex, int x) throws SQLException
  {
    _pstmtWrapped.setInt(parameterIndex, x);
  } /* setInt */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setLong(int parameterIndex, long x) throws SQLException
  {
    _pstmtWrapped.setLong(parameterIndex, x);
  } /* setLong */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNCharacterStream(int parameterIndex, Reader value)
    throws SQLException
  {
    _pstmtWrapped.setNCharacterStream(parameterIndex, value);
  } /* setNCharacterStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNCharacterStream(int parameterIndex, Reader value, long length)
    throws SQLException
  {
    _pstmtWrapped.setNCharacterStream(parameterIndex, value, length);
  } /* setNCharacterStream */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNClob(int parameterIndex, NClob value) throws SQLException
  {
    _pstmtWrapped.setNClob(parameterIndex, value);
  } /* setNClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNClob(int parameterIndex, Reader reader) throws SQLException
  {
    _pstmtWrapped.setNClob(parameterIndex, reader);
  } /* setNClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNClob(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    _pstmtWrapped.setNClob(parameterIndex, reader, length);
  } /* setNClob */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNString(int parameterIndex, String value) throws SQLException
  {
    _pstmtWrapped.setNString(parameterIndex, value);
  } /* setNString */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNull(int parameterIndex, int sqlType) throws SQLException
  {
    _pstmtWrapped.setNull(parameterIndex, sqlType);
  } /* setNull */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setNull(int parameterIndex, int sqlType, String typeName)
    throws SQLException
  {
    _pstmtWrapped.setNull(parameterIndex, sqlType, typeName);
  } /* setNull */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setObject(int parameterIndex, Object x) throws SQLException
  {
    _pstmtWrapped.setObject(parameterIndex, x);
  } /* setObject */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType)
    throws SQLException
  {
    _pstmtWrapped.setObject(parameterIndex, x, targetSqlType);
  } /* setObject */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)
    throws SQLException
  {
    _pstmtWrapped.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
  } /* setObject */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setRef(int parameterIndex, Ref x) throws SQLException
  {
    _pstmtWrapped.setRef(parameterIndex, x);
  } /* setRef */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setRowId(int parameterIndex, RowId x) throws SQLException
  {
    _pstmtWrapped.setRowId(parameterIndex, x);
  } /* setRowId */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
  {
    _pstmtWrapped.setSQLXML(parameterIndex, xmlObject);
  } /* setSQLXML */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setShort(int parameterIndex, short x) throws SQLException
  {
    _pstmtWrapped.setShort(parameterIndex, x);
  } /* setShort */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setString(int parameterIndex, String x) throws SQLException
  {
    _pstmtWrapped.setString(parameterIndex, x);
  } /* setString */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setTime(int parameterIndex, Time x) throws SQLException
  {
    _pstmtWrapped.setTime(parameterIndex, x);
  } /* setTime */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setTime(int parameterIndex, Time x, Calendar cal)
    throws SQLException
  {
    _pstmtWrapped.setTime(parameterIndex, x, cal);
  } /* setTime */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setTimestamp(int parameterIndex, Timestamp x)
    throws SQLException
  {
    _pstmtWrapped.setTimestamp(parameterIndex, x);
  } /* setTimestamp */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
    throws SQLException
  {
    _pstmtWrapped.setTimestamp(parameterIndex, x, cal);
  } /* setTimestamp */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setURL(int parameterIndex, URL x) throws SQLException
  {
    _pstmtWrapped.setURL(parameterIndex, x);
  } /* setURL */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  @Deprecated
  public void setUnicodeStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    _pstmtWrapped.setUnicodeStream(parameterIndex, x, length);
  } /* setUnicodeStream */
  
  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException
  {
    return (iface == PreparedStatement.class);
  } /* isWrapperFor */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @SuppressWarnings("unchecked")
  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException
  {
    T wrapped = null;
    if (isWrapperFor(iface))
      wrapped = (T)_pstmtWrapped;
    return wrapped;
  } /* unwrap */

} /* BasePreparedStatement */

/*======================================================================
BaseStatement implements a wrapped Statement.
Version     : $Id: $
Application : SIARD2
Description : BaseStatement implements a wrapped Statement.
              See https://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html
Platform    : Java 7   
------------------------------------------------------------------------
Copyright  : 2016, Enter AG, RÃ¼ti ZH, Switzerland
Created    : 10.05.2016, Hartwig Thomas
======================================================================*/
package ch.enterag.utils.jdbc;

import java.sql.*;

/*====================================================================*/
/** BaseStatement implements a wrapped Statement and serves as a base
 * for derived JDBC wrappers.
 * @author Hartwig Thomas
 */
public abstract class BaseStatement
  implements Statement
{
  /** wrapped statement */
  private Statement _stmtWrapped = null;

  /*------------------------------------------------------------------*/
  /** convert an AbstractMethodError into an SQLFeatureNotSupportedEception.
   * This error indicates that the JDBC driver wrapped implements an
   * earlier version of JDBC which did not include this method.
   * @param ame
   * @throws SQLFeatureNotSupportedException
   */
  private void throwUndefinedMethod(AbstractMethodError ame)
    throws SQLFeatureNotSupportedException
  {
    throw new SQLFeatureNotSupportedException("Undefined JDBC method!", ame);
  } /* throwUndefinedMethod */
  
  /*------------------------------------------------------------------*/
  /** constructor
   * @param stmtWrapped statement to be wrapped.
   */
  public BaseStatement(Statement stmtWrapped) throws SQLException
  {
    _stmtWrapped = stmtWrapped;
    if (_stmtWrapped != null)
      _stmtWrapped.setEscapeProcessing(false);
  } /* constructor BaseStatement */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public Connection getConnection() throws SQLException
  {
    return _stmtWrapped.getConnection();
  } /* getConnection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    return _stmtWrapped.executeQuery(sql);
  } /* executeQuery */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    return _stmtWrapped.executeUpdate(sql);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    return _stmtWrapped.executeUpdate(sql, autoGeneratedKeys);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes)
      throws SQLException
  {
    return _stmtWrapped.executeUpdate(sql, columnIndexes);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int executeUpdate(String sql, String[] columnNames)
      throws SQLException
  {
    return _stmtWrapped.executeUpdate(sql, columnNames);
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql) throws SQLException
  {
    return _stmtWrapped.execute(sql);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    return _stmtWrapped.execute(sql, autoGeneratedKeys);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int[] columnIndexes)
      throws SQLException
  {
    return _stmtWrapped.execute(sql, columnIndexes);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, String[] columnNames)
      throws SQLException
  {
    return _stmtWrapped.execute(sql, columnNames);
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void addBatch(String sql) throws SQLException
  {
    _stmtWrapped.addBatch(sql);
  } /* addBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void clearBatch() throws SQLException
  {
    _stmtWrapped.clearBatch();
  } /* clearBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int[] executeBatch() throws SQLException
  {
    return _stmtWrapped.executeBatch();
  } /* executeBatch */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet getResultSet() throws SQLException
  {
    return _stmtWrapped.getResultSet();
  } /* getResultSet */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getUpdateCount() throws SQLException
  {
    return _stmtWrapped.getUpdateCount();
  } /* getUpdateCount */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean getMoreResults() throws SQLException
  {
    return _stmtWrapped.getMoreResults();
  } /* getMoreResults */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean getMoreResults(int current) throws SQLException
  {
    return _stmtWrapped.getMoreResults(current);
  } /* getMoreResults */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void close() throws SQLException
  {
    _stmtWrapped.close();
  } /* close */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isClosed() throws SQLException
  {
    return _stmtWrapped.isClosed();
  } /* isClosed */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void closeOnCompletion() throws SQLException
  {
    try { _stmtWrapped.closeOnCompletion(); }
    catch (AbstractMethodError ame) { throwUndefinedMethod(ame); }
  } /* closeOnCompletion */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isCloseOnCompletion() throws SQLException
  {
    boolean bCloseOnCompletion = false;
    try { bCloseOnCompletion = _stmtWrapped.isCloseOnCompletion(); }
    catch (AbstractMethodError ame) { throwUndefinedMethod(ame); }
    return bCloseOnCompletion;
  } /* isCloseOnCompletion */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void cancel() throws SQLException
  {
    _stmtWrapped.cancel();
  } /* cancel */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getMaxFieldSize() throws SQLException
  {
    return _stmtWrapped.getMaxFieldSize();
  } /* getMaxFieldSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setMaxFieldSize(int max) throws SQLException
  {
    _stmtWrapped.setMaxFieldSize(max);
  } /* setMaxFieldSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getMaxRows() throws SQLException
  {
    return _stmtWrapped.getMaxRows();
  } /* getMaxRows */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setMaxRows(int max) throws SQLException
  {
    _stmtWrapped.setMaxRows(max);
  } /* setMaxRows */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException
  {
    _stmtWrapped.setEscapeProcessing(enable);
  } /* setEscapeProcessing */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getQueryTimeout() throws SQLException
  {
    return _stmtWrapped.getQueryTimeout();
  } /* getQueryTimeout */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setQueryTimeout(int seconds) throws SQLException
  {
    _stmtWrapped.setQueryTimeout(seconds);
  } /* setQueryTimeout */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public SQLWarning getWarnings() throws SQLException
  {
    return _stmtWrapped.getWarnings();
  } /* getWarnings */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void clearWarnings() throws SQLException
  {
    _stmtWrapped.clearWarnings();
  } /* clearWarnings */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setCursorName(String name) throws SQLException
  {
    _stmtWrapped.setCursorName(name);
  } /* setCursorName */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setFetchDirection(int direction) throws SQLException
  {
    _stmtWrapped.setFetchDirection(direction);
  } /* setFetchDirection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getFetchDirection() throws SQLException
  {
    return _stmtWrapped.getFetchDirection();
  } /* getFetchDirection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setFetchSize(int rows) throws SQLException
  {
    _stmtWrapped.setFetchSize(rows);
  } /* setFetchSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getFetchSize() throws SQLException
  {
    return _stmtWrapped.getFetchSize();
  } /* getFetchSize */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetConcurrency() throws SQLException
  {
    return _stmtWrapped.getResultSetConcurrency();
  } /* getResultSetConcurrency */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetType() throws SQLException
  {
    return _stmtWrapped.getResultSetType();
  } /* getResultSetType */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public ResultSet getGeneratedKeys() throws SQLException
  {
    return _stmtWrapped.getGeneratedKeys();
  } /* getGeneratedKeys */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public int getResultSetHoldability() throws SQLException
  {
    return _stmtWrapped.getResultSetHoldability();
  } /* getResultSetHoldability */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public void setPoolable(boolean poolable) throws SQLException
  {
    _stmtWrapped.setPoolable(poolable);
  } /* setPoolable */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isPoolable() throws SQLException
  {
    return _stmtWrapped.isPoolable();
  } /* isPoolable */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException
  {
    return (iface == Statement.class);
  } /* isWrapperFor */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  @SuppressWarnings("unchecked")
  public <T> T unwrap(Class<T> iface) throws SQLException
  {
    T wrapped = null;
    if (isWrapperFor(iface))
      wrapped = (T)_stmtWrapped;
    return wrapped;
  } /* unwrap */

} /* class BaseStatement */
